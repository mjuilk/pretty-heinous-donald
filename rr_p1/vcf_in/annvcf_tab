#! /bin/bash

 ###########################################
#         WORKS FOR ANNOTATED VCF'S         #
# simple script performing following steps  #
# 1. QC (looser than diagnostic)            #
# 2. Get known pathogenic vars with ClinVar #
# 3. query chrom, pos, id, ref, alt, rsid   #
# 4. filter for cancer genes based on list  #
# 5. add header to filtered variants table  #
 ###########################################

ml BCFtools
ml Java/21

#!/bin/bash

# Default flags
flag_l=false
flag_h=false
flag_x=false
input_vcf=""

# Parse all arguments in any order
for arg in "$@"; do
    case "$arg" in
        -l) flag_l=true ;;
        -h) flag_h=true ;;
        -x) flag_x=true ;;
        -*) echo "Invalid option: $arg \n Options are either -l, -h, or -x" >&2; exit 1 ;;
        *)
            if [[ -z "$input_vcf" ]]; then
                input_vcf="$arg"
            else
                echo "Error: Multiple input files given: $input_vcf and $arg" >&2
                exit 1
            fi
            ;;
    esac
done

# Validate input
if [[ -z "$input_vcf" ]]; then
    echo "Usage: $0 [-l|-h|-x] input.vcf.gz" >&2
    exit 1
fi

# Handle flags
if $flag_l; then
    dp_thresh=10
    gq_thresh=10
    vaf_het=(0.2 0.8)
    vaf_hom=0.8
    ad_thresh=3
    fn_str="lq"
elif $flag_h; then
    dp_thresh=20
    gq_thresh=15
    vaf_het=(0.3 0.7)
    vaf_hom=0.9
    ad_thresh=6
    fn_str="hq"
elif $flag_x; then
    dp_thresh=30
    gq_thresh=20
    vaf_het=(0.3 0.7)
    vaf_hom=0.9
    ad_thresh=9
    fn_str="xq"
else
    dp_thresh=0
    gq_thresh=0
    vaf_het=(0 0)
    vaf_hom=0
    ad_thresh=0
    fn_str="nq"
fi

# Your filter logic here
echo "Filtering $input_vcf with mode $fn_str"
echo "DP Threshold: $dp_thresh"
echo "GQ Threshold: $gq_thresh"
echo "VAF Constraints: ${vaf_het[0]}-${vaf_het[1]} (Heterozygous) $vaf_hom (Homozygous)"
echo "AD Threshold: $ad_thresh"

filter_expr="((GT=\"0/1\" || GT=\"1/0\" || GT=\"0|1\" || GT=\"1|0\") && "\
"FORMAT/DP >= $dp_thresh && FORMAT/GQ >= $gq_thresh && "\
"FORMAT/AD[0:1] >= $ad_thresh && (FORMAT/AD[0:0]+FORMAT/AD[0:1]) > 0 && "\
"(FORMAT/AD[0:1]/(FORMAT/AD[0:0]+FORMAT/AD[0:1])) >= ${vaf_het[0]} && (FORMAT/AD[0:1]/(FORMAT/AD[0:0]+FORMAT/AD[0:1])) <= ${vaf_het[1]}) || "\
"((GT=\"1/1\" || GT=\"1|1\") && "\
"FORMAT/DP >= $dp_thresh && FORMAT/GQ >= $gq_thresh && "\
"FORMAT/AD[0:1] >= $ad_thresh && (FORMAT/AD[0:0]+FORMAT/AD[0:1]) > 0 && "\
"(FORMAT/AD[0:1]/(FORMAT/AD[0:0]+FORMAT/AD[0:1])) > $vaf_hom)"

bcftools filter -i "$filter_expr" "$input_vcf" -o "${fn_str}.vcf.gz"

#java -Xmx16G -jar ~/ext/snpEff/SnpSift.jar annmem    -dbfile ~/ext/snpEff/clinvar_20250521.vcf.gz \
#    -fields CLNSIG       lq.vcf.gz    | grep "CLNSIG=Pa" > clvp.ann.vcf

#bcftools view -h $vcf_fn | cat - clvp.ann.vcf > temp && mv temp clvp.ann.vcf

#bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t[%INFO/CSQ]\n' clvp.ann.vcf | awk -F'\t' '{split($5, csq, "|"); print $1, $2, $3, $4, csq[4], csq[2], csq[18]}' OFS='\t' > variants.tsv

#awk 'NR==FNR {genes[$1];next} $5 in genes' ~/scripts/vcf_in/cangenLG.txt variants.tsv > cancer_vars.tsv

#echo -e "CHROM\tPOS\tREF\tALT\tGENE\tCONSEQUENCE\tRSID" | cat - cancer_vars.tsv > temp && mv temp cancer_vars.tsv
